// middleware.ts (–¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, —Ä—è–¥–æ–º —Å package.json)
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(request: NextRequest) {
  const token = request.cookies.get("userToken")?.value;
  const { pathname } = request.nextUrl;

  // –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã
  const protectedRoutes = ["/personal-information"];

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏ –∏–¥—ë—Ç –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Ä–æ—É—Ç
  const isProtected = protectedRoutes.some((route) =>
    pathname.startsWith(route)
  );
  if (isProtected && !token) {
    return NextResponse.redirect(new URL("/login", request.url));
  }

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏ –∏–¥—ë—Ç –Ω–∞ /login
  if (pathname === "/login" && token) {
    return NextResponse.redirect(
      new URL("/personal-information", request.url)
    );
  }

  // –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  return NextResponse.next();
}

// üîß —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏, –≥–¥–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å middleware
export const config = {
  matcher: ["/personal-information/:path*", "/login"],
};
